/*
  ==============================================================================

   Copyright 2021, 2022 Suzuki Kengo

   Simple Reverb is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
 
   Simple Reverb is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
   GNU General Public License for more details.
 
   You should have received a copy of the GNU General Public License
   along with Simple Reverb. If not, see <http://www.gnu.org/licenses/>.

  ==============================================================================
*/

#include "FreezeButton.h"

// Generated by SVG Path Converter
static const unsigned char freezeIconData[] = { 110,109,51,51,243,66,174,231,138,67,98,164,112,152,66,174,231,138,67,112,61,29,66,205,12,116,67,112,61,29,66,92,143,74,67,98,112,61,29,66,82,56,34,67,72,97,149,66,92,207,3,67,51,51,243,66,92,207,3,67,98,61,74,14,67,92,207,3,67,102,230,35,67,225,186,13,
67,10,215,57,67,174,71,33,67,98,123,148,72,67,133,107,46,67,112,189,83,67,20,174,60,67,41,28,89,67,92,15,68,67,108,123,148,100,67,92,15,68,67,108,10,23,95,67,143,130,76,67,108,30,69,95,67,143,194,76,67,108,235,209,90,67,10,23,83,67,98,204,204,90,67,184,
30,83,67,174,199,90,67,102,38,83,67,255,191,90,67,20,46,83,67,108,30,133,89,67,122,20,85,67,98,174,199,87,67,82,184,87,67,205,140,46,67,174,231,138,67,51,51,243,66,174,231,138,67,99,109,51,51,243,66,92,207,25,67,98,225,122,209,66,92,207,25,67,184,158,
178,66,235,209,30,67,174,71,156,66,246,232,39,67,98,133,235,140,66,246,40,46,67,112,61,117,66,113,61,57,67,112,61,117,66,92,143,74,67,98,112,61,117,66,133,235,103,67,82,184,176,66,92,207,127,67,51,51,243,66,92,207,127,67,98,236,17,28,67,92,207,127,67,
236,17,59,67,174,135,89,67,236,81,68,67,194,245,76,67,98,154,89,49,67,184,30,52,67,41,28,20,67,92,207,25,67,51,51,243,66,92,207,25,67,99,109,143,2,149,67,102,230,138,67,98,235,17,117,67,102,230,138,67,10,215,75,67,81,184,87,67,40,28,74,67,234,17,85,67,
108,142,194,72,67,254,255,82,67,108,40,92,68,67,254,191,76,67,108,30,133,68,67,29,133,76,67,108,81,248,62,67,60,10,68,67,108,142,130,74,67,60,10,68,67,98,81,120,87,67,50,51,50,67,224,122,125,67,204,204,3,67,143,2,149,67,204,204,3,67,98,51,179,171,67,
204,204,3,67,174,39,190,67,204,140,37,67,174,39,190,67,204,12,79,67,98,174,39,190,67,215,99,119,67,10,119,172,67,102,230,138,67,143,2,149,67,102,230,138,67,99,109,205,76,95,67,195,245,76,67,98,62,138,104,67,144,130,89,67,31,197,131,67,205,204,127,67,
144,2,149,67,205,204,127,67,98,164,112,157,67,205,204,127,67,246,40,165,67,62,202,122,67,185,190,170,67,51,179,113,67,98,124,148,174,67,51,115,107,67,175,39,179,67,184,94,96,67,175,39,179,67,204,12,79,67,98,175,39,179,67,163,176,49,67,73,161,165,67,204,
204,25,67,144,2,149,67,204,204,25,67,98,0,192,135,67,92,207,25,67,31,69,114,67,184,30,52,67,205,76,95,67,195,245,76,67,99,101,0,0 };

FreezeButton::FreezeButton() : juce::Button (juce::String{})
{
    setOpaque (true);
    setClickingTogglesState (true);
    onClick = [&]()
    {
        freezeColour = getToggleState() ? MyColours::blue : MyColours::grey;
    };

    freezeIconPath.loadPathFromData (freezeIconData, sizeof (freezeIconData));
}

void FreezeButton::resized()
{
    freezeIconBounds = getLocalBounds().toFloat().reduced (12.0f);
    freezeIconPath.applyTransform (freezeIconPath.getTransformToScaleToFit (freezeIconBounds, true));
}

void FreezeButton::paint (juce::Graphics& g)
{
    g.fillAll (MyColours::black);

    g.setColour (freezeColour);
    g.fillPath (freezeIconPath);
}

void FreezeButton::mouseDown (const juce::MouseEvent& event)
{
    juce::Button::mouseDown (event);

    const auto centre = freezeIconBounds.getCentre();
    const auto trans  = juce::AffineTransform::scale (0.95f, 0.95f, centre.x, centre.y);
    freezeIconPath.applyTransform (trans);
}

void FreezeButton::mouseUp (const juce::MouseEvent& event)
{
    juce::Button::mouseUp (event);

    const auto trans = freezeIconPath.getTransformToScaleToFit (freezeIconBounds, true);
    freezeIconPath.applyTransform (trans);
}

void FreezeButton::paintButton (juce::Graphics& g, 
                                bool shouldDrawButtonAsHighlighted,
                                bool shouldDrawButtonAsDown)
{
    juce::ignoreUnused (g, shouldDrawButtonAsHighlighted, shouldDrawButtonAsDown); 
}
